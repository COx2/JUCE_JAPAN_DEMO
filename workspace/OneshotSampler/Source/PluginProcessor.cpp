/*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
OneshotSamplerAudioProcessor::OneshotSamplerAudioProcessor()
#ifndef JucePlugin_PreferredChannelConfigurations
     : AudioProcessor (BusesProperties()
                     #if ! JucePlugin_IsMidiEffect
                      #if ! JucePlugin_IsSynth
                       .withInput  ("Input",  AudioChannelSet::stereo(), true)
                      #endif
                       .withOutput ("Output", AudioChannelSet::stereo(), true)
                     #endif
                       )
    ,currentReader(nullptr)
#endif
{
}

OneshotSamplerAudioProcessor::~OneshotSamplerAudioProcessor()
{
    if (currentReader)
    {
        delete currentReader;
        currentReader = nullptr;
    }
}

//==============================================================================
const String OneshotSamplerAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool OneshotSamplerAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool OneshotSamplerAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool OneshotSamplerAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double OneshotSamplerAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int OneshotSamplerAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int OneshotSamplerAudioProcessor::getCurrentProgram()
{
    return 0;
}

void OneshotSamplerAudioProcessor::setCurrentProgram (int index)
{
}

const String OneshotSamplerAudioProcessor::getProgramName (int index)
{
    return {};
}

void OneshotSamplerAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void OneshotSamplerAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    synth.clearVoices();
    synth.clearSounds();
    synth.setCurrentPlaybackSampleRate(sampleRate);
    
    keyboardState.reset();
    
}

void OneshotSamplerAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    keyboardState.reset();
    
    synth.clearVoices();
    synth.clearSounds();
    
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool OneshotSamplerAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    if (layouts.getMainOutputChannelSet() != AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void OneshotSamplerAudioProcessor::processBlock (AudioBuffer<float>& buffer, MidiBuffer& midiMessages)
{
    if(isBusy) return;
    
    ScopedNoDenormals noDenormals;
    auto totalNumInputChannels  = getTotalNumInputChannels();
    auto totalNumOutputChannels = getTotalNumOutputChannels();

    
    // pass these messages to the keyboard state so that it can update the component
    // to show on-screen which keys are being pressed on the physical midi keyboard.
    // This call will also add midi messages to the buffer which were generated by
    // the mouse-clicking on the on-screen keyboard.
    keyboardState.processNextMidiBuffer(midiMessages, 0, buffer.getNumSamples(), true);

    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (auto i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    // Make sure to reset the state if your inner loop is processing
    // the samples and the outer loop is handling the channels.
    // Alternatively, you can process the samples with the channels
    // interleaved by keeping the same state.
    for (int channel = 0; channel < totalNumInputChannels; ++channel)
    {
        auto* channelData = buffer.getWritePointer (channel);

        // ..do something to the data...
    }
    
    synth.renderNextBlock(buffer, midiMessages, 0,  buffer.getNumSamples());
}

//==============================================================================
bool OneshotSamplerAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* OneshotSamplerAudioProcessor::createEditor()
{
    return new OneshotSamplerAudioProcessorEditor (*this);
}

//==============================================================================
void OneshotSamplerAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void OneshotSamplerAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new OneshotSamplerAudioProcessor();
}


void OneshotSamplerAudioProcessor::setupSampler(AudioFormatReader* newReader)
{
    isBusy = true;

    synth.clearVoices();
    synth.clearSounds();

    if (currentReader)
    {
        delete currentReader;
        currentReader = nullptr;
    }
    currentReader = newReader;

    // allow our sound to be played on all notes
    BigInteger allNotes;
    allNotes.setRange(0, 128, true);

    // Monophonic
//    synth.addVoice(new SamplerVoice());
    
    // Polyphonic
    for (int i = 0; i < 128; i++) {
        synth.addVoice(new SamplerVoice());
    }
    
    // finally, add our sound
    synth.addSound(new SamplerSound("default", *currentReader, allNotes, 60, 0, 0.1, 10.0));
    
    isBusy = false;
}